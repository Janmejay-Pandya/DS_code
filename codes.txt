import java.util.Arrays;
public class MergeSortWithPassDisplay {
    // Merge function that merges two sorted halves of the array
    public static void merge(int arr[], int low, int mid, int high) {
        int n1 = mid - low + 1;
        int n2 = high - mid;
        
        int[] L = new int[n1];
        int[] R = new int[n2];

        // Copy data to temporary arrays
        for (int i = 0; i < n1; i++)
            L[i] = arr[low + i];
        for (int j = 0; j < n2; j++)
            R[j] = arr[mid + 1 + j];

        int i = 0, j = 0;
        int k = low;

        // Merge the temporary arrays back into arr[low..high]
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        // Copy remaining elements of L[] if any
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        // Copy remaining elements of R[] if any
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    // Recursive function to perform merge sort and display each pass
    public static void mergeSort(int arr[], int low, int high, int pass) {
        if (low < high) {
            int mid = low + (high - low) / 2;

            // Sort first and second halves recursively
            mergeSort(arr, low, mid, pass + 1);
            mergeSort(arr, mid + 1, high, pass + 1);

            // Merge the sorted halves and display the pass
            merge(arr, low, mid, high);
            System.out.println("Pass " + pass + ": " + Arrays.toString(arr));
        }
    }

    // Main function to test the merge sort
    public static void main(String[] args) {
        int arr[] = { 12, 11, 13, 5, 6, 7 };
        System.out.println("Given array:");
        System.out.println(Arrays.toString(arr));

        // Start merge sort and display passes
        mergeSort(arr, 0, arr.length - 1, 1);

        System.out.println("\nSorted array:");
        System.out.println(Arrays.toString(arr));
    }
}



// Dijkstra code

import java.util.Scanner;
public class Dijisktra1 {
    public static void dijisktra(int[][] adjanceyMatrix, int v) {
        int distance[] = new int[v];
        boolean visited[] = new boolean[v];
        distance[0] = 0;
        for (int i = 1; i < v; i++) {
            distance[i] = Integer.MAX_VALUE;
        }
        for (int i = 0; i < v - 1; i++) {
            int minVertex = findMinVertex(distance, visited);
            visited[minVertex] = true;
            // Explore neightbours
            for (int j = 0; j < v; j++) {
                if (adjanceyMatrix[minVertex][j] != 0 && !visited[j] && distance[minVertex] != Integer.MAX_VALUE) {
                    int newDist = distance[minVertex] + adjanceyMatrix[minVertex][j];
                    if (newDist < distance[j]) {
                        distance[j] = newDist;
                    }
                }
            }
        }
        // printing the output
        System.out.println("Vertex  Distance");
        for (int i = 0; i < v; i++) {
            System.out.println(i + "\t " + distance[i]);
        }
    }
    public static int findMinVertex(int[] distance, boolean[] visited) {
        int minDist = -1;
        for (int i = 0; i < distance.length; i++) {
            if (!visited[i] && (minDist == -1 || distance[i] < distance[minDist])) {
                minDist = i;
            }
        }
        return minDist;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the vertex");
        int v = sc.nextInt();
        System.out.println("Enter the no of edges");
        int e = sc.nextInt();
        int[][] adjanceyMatrix = new int[v][v];
        System.out.println("Enter the vertices and the weight between the vertices");
        for (int i = 0; i < e; i++) {
            int v1 = sc.nextInt();
            int v2 = sc.nextInt();
            int weight = sc.nextInt();
            adjanceyMatrix[v1][v2] = weight;
            adjanceyMatrix[v2][v1] = weight;
        }
        dijisktra(adjanceyMatrix, v);
        sc.close();
    }
}

//Prims Algo
import java.util.Scanner;

public class PrimsPractice {

    public static void primsAlgo(int edges[][], int v) {
        int parent[] = new int[v];
        int weight[] = new int[v];
        boolean visited[] = new boolean[v];
        // Initialize all the visited to false and weights to infinity
        for (int i = 0; i < v; i++) {
            visited[i] = false;
            weight[i] = Integer.MAX_VALUE;
        }
        parent[0] = -1;
        weight[0] = 0;
        for (int i = 1; i < v; i++) {
            int minVertex = findMinVertex(weight, visited, v);
            visited[minVertex] = true;
            for (int j = 0; j < v; j++) {
                if (!visited[j] && edges[minVertex][j] != 0) {
                    if (edges[minVertex][j] < weight[j]) {
                        weight[j] = edges[minVertex][j];
                        parent[j] = minVertex;
                    }
                }
            }
        }
        // Printing the solution
        System.out.println("vertex  Parent  weight");
        for (int i = 1; i < v; i++) {
            if (parent[i] < i) {
                System.out.println(parent[i] + "\t " + i + "\t " + weight[i]);
            } else {
                System.out.println(i + "\t " + parent[i] + "\t " + weight[i]);
            }
        }
    }

    public static int findMinVertex(int weight[], boolean visited[], int v) {
        int minVertex = -1;
        for (int i = 0; i < v; i++) {
            if (!visited[i] && (minVertex == -1 || weight[i] < weight[minVertex])) {
                minVertex = i;
            }
        }
        return minVertex;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v = sc.nextInt();
        int e = sc.nextInt();
        int[][] edges = new int[v][v]; // Declare a 2D array
        for (int i = 0; i < v; i++) {
            for (int j = 0; j < v; j++) {
                edges[i][j] = 0;
            }
        }
        for (int i = 0; i < e; i++) {
            int v1 = sc.nextInt();
            int v2 = sc.nextInt();
            int weight = sc.nextInt();
            edges[v1][v2] = weight;
            edges[v2][v1] = weight;
        }
        primsAlgo(edges, v);
        sc.close();
    }
}


//Kruskal's Algo

import java.util.ArrayList; 
import java.util.Comparator; 
import java.util.List; 
  
public class KruskalsMST { 
  
    // Defines edge structure 
    static class Edge { 
        int src, dest, weight; 
  
        public Edge(int src, int dest, int weight) 
        { 
            this.src = src; 
            this.dest = dest; 
            this.weight = weight; 
        } 
    } 
  
    // Defines subset element structure 
    static class Subset { 
        int parent, rank; 
  
        public Subset(int parent, int rank) 
        { 
            this.parent = parent; 
            this.rank = rank; 
        } 
    } 
  
    // Starting point of program execution 
    public static void main(String[] args) 
    { 
        int V = 4; 
        List<Edge> graphEdges = new ArrayList<Edge>( 
            List.of(new Edge(0, 1, 10), new Edge(0, 2, 6), 
                    new Edge(0, 3, 5), new Edge(1, 3, 15), 
                    new Edge(2, 3, 4))); 
  
        // Sort the edges in non-decreasing order 
        // (increasing with repetition allowed) 
        graphEdges.sort(new Comparator<Edge>() { 
            @Override public int compare(Edge o1, Edge o2) 
            { 
                return o1.weight - o2.weight; 
            } 
        }); 
  
        kruskals(V, graphEdges); 
    } 
  
    // Function to find the MST 
    private static void kruskals(int V, List<Edge> edges) 
    { 
        int j = 0; 
        int noOfEdges = 0; 
  
        // Allocate memory for creating V subsets 
        Subset subsets[] = new Subset[V]; 
  
        // Allocate memory for results 
        Edge results[] = new Edge[V]; 
  
        // Create V subsets with single elements 
        for (int i = 0; i < V; i++) { 
            subsets[i] = new Subset(i, 0); 
        } 
  
        // Number of edges to be taken is equal to V-1 
        while (noOfEdges < V - 1) { 
  
            // Pick the smallest edge. And increment 
            // the index for next iteration 
            Edge nextEdge = edges.get(j); 
            int x = findRoot(subsets, nextEdge.src); 
            int y = findRoot(subsets, nextEdge.dest); 
  
            // If including this edge doesn't cause cycle, 
            // include it in result and increment the index 
            // of result for next edge 
            if (x != y) { 
                results[noOfEdges] = nextEdge; 
                union(subsets, x, y); 
                noOfEdges++; 
            } 
  
            j++; 
        } 
  
        // Print the contents of result[] to display the 
        // built MST 
        System.out.println( 
            "Following are the edges of the constructed MST:"); 
        int minCost = 0; 
        for (int i = 0; i < noOfEdges; i++) { 
            System.out.println(results[i].src + " -- "
                               + results[i].dest + " == "
                               + results[i].weight); 
            minCost += results[i].weight; 
        } 
        System.out.println("Total cost of MST: " + minCost); 
    } 
  
    // Function to unite two disjoint sets 
    private static void union(Subset[] subsets, int x, 
                              int y) 
    { 
        int rootX = findRoot(subsets, x); 
        int rootY = findRoot(subsets, y); 
  
        if (subsets[rootY].rank < subsets[rootX].rank) { 
            subsets[rootY].parent = rootX; 
        } 
        else if (subsets[rootX].rank 
                 < subsets[rootY].rank) { 
            subsets[rootX].parent = rootY; 
        } 
        else { 
            subsets[rootY].parent = rootX; 
            subsets[rootX].rank++; 
        } 
    } 
  
    // Function to find parent of a set 
    private static int findRoot(Subset[] subsets, int i) 
    { 
        if (subsets[i].parent == i) 
            return subsets[i].parent; 
  
        subsets[i].parent 
            = findRoot(subsets, subsets[i].parent); 
        return subsets[i].parent; 
    } 
} 


// 0/1 KnapSack problem

public class KnapSackProb {
    public static int knapSack(int capacity, int weight[], int profit[], int n) {
        if (n == 0 || capacity == 0) {
            return 0;
        }
        if (weight[n - 1] > capacity) {
            return knapSack(capacity, weight, profit, n - 1);
        } else {
            return Math.max(knapSack(capacity, weight, profit, n - 1),
                    profit[n - 1] + knapSack(capacity - weight[n - 1], weight, profit, n - 1));
        }
    }

    public static void main(String[] args) {
        int profit[] = { 3, 4, 2 };
        int weight[] = { 2, 5, 3 };
        int capacity = 6;
        int n = profit.length;
        int maxProfit = knapSack(capacity, weight, profit, n);
        System.out.println("The maximum profit is " + maxProfit);
    }
}


// 0/1 KnapSack by Dynamic Programming

public class DpKnapSackPrac {

    public static int knapSackDp(int capacity, int weight[], int profit[], int n, int dp[][]) {
        if (n == 0 || capacity == 0) {
            return 0;
        }
        if (dp[n][capacity] != -1) {
            return dp[n][capacity];
        }
        if (weight[n - 1] > capacity) {
            return knapSackDp(capacity, weight, profit, n - 1, dp);
        } else {
            return dp[n][capacity] = Math.max(
                    (profit[n - 1] + knapSackDp(capacity - weight[n - 1], weight, profit, n - 1, dp)),
                    knapSackDp(capacity, weight, profit, n - 1, dp));
        }
    }

    public static int knapSack(int capacity, int weight[], int profit[], int n) {
        int dp[][] = new int[n + 1][capacity + 1];

        for (int i = 0; i < n + 1; i++) {
            for (int j = 0; j < capacity + 1; j++) {
                dp[i][j] = -1;
            }
        }
        return knapSackDp(capacity, weight, profit, n, dp);
    }

    public static void main(String[] args) {
        int profit[] = { 1, 2, 3 };
        int weight[] = { 4, 5, 1 };
        int capacity = 4;
        int N = profit.length;
        System.out.println(knapSack(capacity, weight, profit, N));
    }
}


//Flyod's Warshall 
public class AllPairShortestPath {
    final static int INF = 99999;
    static int V = 4;

    public static void floydWarshall(int dist[][]) {
        int i, j, k;
        for (k = 0; k < V; k++) {
            for (i = 0; i < V; i++) {
                for (j = 0; j < V; j++) {
                    if (dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }
        printSolution(dist);
    }

    public static void printSolution(int dist[][]) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][j] == INF) {
                    System.out.print("INF   ");
                } else {
                    System.out.print(dist[i][j] + "     ");
                }
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int graph[][] = {
                { 0, 5, INF, 10 },
                { INF, 0, 3, INF },
                { INF, INF, 0, 1 },
                { INF, INF, INF, 0 }
        };
        AllPairShortestPath a = new AllPairShortestPath();
        a.floydWarshall(graph);
    }
}

// Optimal merge pattern

import java.util.PriorityQueue;

public class OptimalMerge {

    public static void mergePattern(int files[], int size) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int i = 0; i < size; i++) {
            pq.add(files[i]);
        }
        int count = 0;
        while (pq.size() > 1) {
            int temp = pq.poll() + pq.poll();

            count += temp;
            pq.add(temp);
        }
        System.out.println("The minimum computation is " + count);
    }

    public static void main(String[] args) {
        int size = 6;
        int files[] = { 2, 3, 4, 5, 6, 7 };
        mergePattern(files, size);
    }
}

//N queens Problem 
/* Java program to solve N Queen Problem usingbacktracking */
public class NQueenProblem {
    final int N = 4;
    void printSolution(int board[][]) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                System.out.print(" " + board[i][j]
                        + " ");
            System.out.println();
        }
    }
    boolean isSafe(int board[][], int row, int col) {
        int i, j;

        /* Check this row on left side */
        for (i = 0; i < col; i++)
            if (board[row][i] == 1)
                return false;

        /* Check upper diagonal on left side */
        for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 1)
                return false;

        /* Check lower diagonal on left side */
        for (i = row, j = col; j >= 0 && i < N; i++, j--)
            if (board[i][j] == 1)
                return false;

        return true;
    }
    boolean solveNQUtil(int board[][], int col) {
        if (col >= N)
            return true;
        for (int i = 0; i < N; i++) {
            //Check if the queen can be placed on board[i][col]
            if (isSafe(board, i, col)) {
                /* Place this queen in board[i][col] */
                board[i][col] = 1;
                /* recur to place rest of the queens */
                if (solveNQUtil(board, col + 1) == true)
                    return true;
                board[i][col] = 0; // BACKTRACK
            }
        }
        return false;
    }
    boolean solveNQ() {
        int board[][] = { { 0, 0, 0, 0 },
                { 0, 0, 0, 0 },
                { 0, 0, 0, 0 },
                { 0, 0, 0, 0 } };

        if (solveNQUtil(board, 0) == false) {
            System.out.print("Solution does not exist");
            return false;
        }
        printSolution(board);
        return true;
    }
    public static void main(String args[]) {
        NQueenProblem Queen = new NQueenProblem();
        Queen.solveNQ();
    }
}


//QuickSortWithPassDisplay

// public class QuickSortWithPass {
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            System.out.println("Array after partitioning with pivot index " + pi + ": ");
            printArray(arr);
            quickSort(arr, low, pi - 1); // Left sub-array
            quickSort(arr, pi + 1, high); // Right sub-array
        }
    }
    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1; 
        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1; 
    }
    public static void printArray(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
    public static void main(String[] args) {
        int[] arr = { 10, 7, 8, 9, 1, 5 };
        System.out.println("Original Array: ");
        printArray(arr);

        quickSort(arr, 0, arr.length - 1);

        System.out.println("Sorted Array: ");
        printArray(arr);
    }
}

//Binary search

public class Binary_search {
    static int BinarySearch(int arr[], int low, int high, int key) {
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == key) {
                return mid;
            } else if (arr[mid] < key) {
                return BinarySearch(arr, mid + 1, high, key);
            } else {
                return BinarySearch(arr, low, mid - 1, key);
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        int arr[] = { 2,3,4,54,65,87 };
        int size = arr.length;
        int high = size - 1;
        int key = 65;
        int index = BinarySearch(arr, 0, high, key);
        if (index != -1) {
            System.out.println("Element " + key + " found at index " + index);
        } else {
            System.out.println("Element not found");
        }
    }
}

//Linear Search

public class Linear_search {
    static int linearsearch(int arr[], int size, int key) {
        if (size==0) {
            return -1;
        } else if (arr[size - 1] == key) {
            return size - 1;
        }
        return linearsearch(arr, size-1, key);
    }
    public static void main(String[] args) {
        int arr[] = { 2, 4, 1, 34, 23, 43 };
        int size = arr.length;
        int key = 1;
        int index = linearsearch(arr, size, key);
        if (index!=-1) {
            System.out.println("The element "+key+" found at index "+index+" from the array");
        } else {
            System.out.println("Key not found");
        }
    }
}
